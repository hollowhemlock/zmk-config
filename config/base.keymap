#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires zmk-auto-layer module.
#include <behaviors/unicode.dtsi> // Requires zmk-unicode module.
#include <zmk-helpers/helper.h> // Requires zmk-helpers module.
#include <dt-bindings/zmk/keys.h>
#ifdef CONFIG_WIRELESS
  #include <dt-bindings/zmk/bt.h>
  #include <dt-bindings/zmk/outputs.h>
  #define _BT_SEL_KEYS_                                                        \
      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
  #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

// Layers
// MAIN
#define L_COLEMAK_DH 0
#define L_NUMBER 1
#define L_NAV 2
#define L_FUN 3
#define UTILITY 4

// GAMING
#define L_GAMING 5
#define L_GAMING_NUMBER 6
#define L_GAMING_RIGHT_ALPHA 7

// ALTERNATE
#define QWERTY 8
// #define UC 9

#define XXX &none
#define ___ &trans

/* Global defaults */

#define QUICK_TAP_MS 175

&sk {
    release-after-ms = <250>; // Needs to be long enough for one handed modifiers. Short enough to allow mouse zooming and mitigage alt tab conflicts.
    quick-release;
};

// Important because errors without sticky layer are punishing and cause unconfident typing. e.g. a fast layer + enter roll
&sl {
    release-after-ms = <250>; // Can be shorter than &sk.
    // TODO: need to remove following?
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

// Initially used for gaming layer but can't use for gaming holds.
// &mt {
//     tapping-term-ms = <150>;
// };

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#ifndef LH2
  #define THUMBS LH1 LH0 RH0 RH1         // Thumbs on 34 keys.
#else
  #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.
#endif

// TODO: move up more later?
// Personal includes
#include "includes/combos_main.dtsi"   // main typing layers combos
#include "includes/combos_gaming.dtsi" // gaming layer combos

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
// note: program hotkeys sometimes don't respond to non standard keys
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
)
// Not needed greater than is on a combo
// ZMK_BEHAVIOR(comma_inner_morph, mod_morph,
//     bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
//     mods = <(MOD_LCTL|MOD_RCTL)>;
// )

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
// note: program hotkeys sometimes don't respond to non standard keys
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// Not needed greater than is on a combo
// ZMK_BEHAVIOR(dot_inner_morph, mod_morph,
//     bindings = <&kp COLON>, <&kp GREATER_THAN>;
//     mods = <(MOD_LCTL|MOD_RCTL)>;
// )

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num L_NUMBER 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
    tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;
)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word L_NUMBER>, <&sl L_NUMBER>;  // reverse this for sticky-num on single tap
              tapping-term-ms = <200>; )

// // TODO: maybe add semi colon to continue list.
// &num_word {
//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL LSHIFT COLON>;
// };


// This is ambiguous because it gits rid of the benefit of a quick roll with sticky key and enter. It can accidentily produce a letter.
ZMK_HOLD_TAP(hsltk, 
    bindings = <&sl>, <&kp>;
    flavor = "hold-preferred";
    tapping-term-ms = <150>;
)

// used for gaming alt key; unusable if using modtap number keys and function keys for dyson sphere project
// maybe not unstable because it is decided on the first key 
ZMK_HOLD_TAP(hktsl,
    bindings = <&kp>, <&sl>;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
)

// ZMK_TAP_DANCE(td_nav_esc,
//     bindings = <&sl L_NAV>, <&kp ESC>;
//     tapping-term-ms = <200>;
// )

// TODO: optimize release after, 
// For vscode
// NOTE: some combination don't use ctrl but can be accessed by waiting release-after-ms
ZMK_BEHAVIOR(sticky_long, sticky_key,
    bindings = <&kp>;
    release-after-ms = <1000>; // Optional: release after 1 second if no key is pressed
)

// For vscode
ZMK_MACRO(sq_Ck_stickyC,
    bindings = <&kp LC(K)>, <&sticky_long LCTRL>;
)

// Convert combos to zmk-helpers macros
// TODO: not generic can't add wider boards

// ZMK_COMBO(to_l_colemak_dh, &to L_COLEMAK_DH, 15 16, ALL, 50)
// ZMK_COMBO(to_l_gaming, &to L_GAMING, 5 6, ALL, 50)

ZMK_COMBO(l_utility_left_access, &mo UTILITY, 13 14, ALL, 50)
ZMK_COMBO(l_utility_right_access, &mo UTILITY, 15 16, ALL, 50)

// ZMK_COMBO(l_left_double_thumb, &sl LEFT_DOUBLE_THUMB, 30 31, ALL, 50)
// ZMK_COMBO(l_right_double_thumb, &mo L_FUN, 32 33, ALL, 50) // was function layer, annoying to use
// ZMK_COMBO(test_gaming_alt, &kp N2, LT4 LM4, L_GAMING, 50, 75) // require-prior-idle-ms
// ZMK_COMBO(test_gaming_number, &kp N1, 1 11, L_GAMING, 50, 75) // require-prior-idle-ms

// TODO: clean up nones to trans if needed.
// TODO: hide the alt key under the gaming alpha layer so it can be held while gaming.
// TODO: find a place for gaming functions when needed. must be fluid. maybe a combo on the thumb. can go 15 functions that way.

ZMK_LAYER(l_colemak_dh,
    &kp Q           &kp W           &kp F           &kp P           &kp B           &kp J           &kp L           &kp U           &kp Y           &kp SQT 
    &hml LSHFT A    &hml LCTRL R    &hml LALT S     &hml LGUI T     &kp G           &kp M           &hmr RGUI N     &hmr RALT E     &hmr RCTRL I    &hmr RSHFT O
    &kp Z           &kp X           &kp C           &kp D           &kp V           &kp K           &kp H           &comma_morph    &dot_morph      &kp SLASH
                                                    &sl L_NAV   &kp SPACE       &smart_shft     SMART_NUM
)
// l_colemak_dh {
//     bindings = <
//           &kp Q       &kp W       &kp F       &kp P       &kp B 	      &kp J       &kp L       &kp U       &kp Y       &kp SEMI 
//           &kp A       &kp R       &kp S       &kp T       &kp G 	      &kp M       &kp N       &kp E       &kp I       &kp O
//           &kp Z       &kp X       &kp C       &kp D       &kp V	          &kp K       &kp H       &kp CMMA    &kp DOT     &kp SLASH
//                                         &sl L_NAV   &kp SPACE  			      &sl L_FUN   &sl L_NUMBER
//     >;
// };

ZMK_LAYER(l_qwerty,
    &kp Q           &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P 
    &hml LSHFT A    &hml LCTRL S    &hml LALT D     &hml LGUI F     &kp G           &kp H           &hmr RGUI J     &hmr RALT K     &hmr RCTRL L    &hmr RSHFT SEMI
    &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &kp CMMA        &kp DOT         &kp SLASH
                                                    &sl L_NAV   &kp SPACE       &smart_shft     SMART_NUM
)
// T G B are horizontal combos in last column. How to incorporate function keys in number layer? 6x3 board would be nice with an isolated alt key and isoltaed gaming number layer. 
ZMK_LAYER(l_gaming,
    &kp TAB         &kp Q           &kp W           &kp E           &kp R           &kp Y           &kp U           &kp I           &kp O           &kp P 
    &kp LSHIFT      &kp A           &kp S           &kp D           &kp F           &kp H           &kp J           &kp K           &kp L           &kp SEMI 
    &kp LCTRL       &kp Z           &kp X           &kp C           &kp V           &kp N           &kp M           &kp CMMA        &kp DOT         &kp SLASH
                                    &hktsl LALT L_GAMING_RIGHT_ALPHA &kp SPACE   &sl L_FUN   &sl L_GAMING_RIGHT_ALPHA
)	  
// l_gaming { // does shift need to be next to the left of a
//     bindings = <
//           &sl L_GAMING_RIGHT_ALPHA   &kp Q       &kp W       &kp E       &kp R     	        &kp Y       &kp U       &kp I       &kp O       &kp P 
//           &sl L_GAMING_NUMBER       &kp A       &kp S       &kp D       &kp F 	            &kp H       &kp J       &kp K       &kp L       &kp SEMI 
//           &sl L_FUN                 &kp Z       &kp X       &kp C       &kp V   	        &kp N       &kp M       &kp CMMA    &kp DOT     &kp SLASH
//                     &sl L_NAV &kp SPACE  				&trans  &trans
//     >;
// };	  

ZMK_LAYER(l_number,
    &trans          &kp N7          &kp N8          &kp N9          &trans          &trans          &trans          &trans          &trans          &trans
    &kp  N0         &kp N4          &kp N5          &kp N6          &trans          &trans          &trans          &trans          &sq_Ck_stickyC  &kp SEMI
    &trans          &kp N1          &kp N2          &kp N3          &trans          &trans          &trans          &trans          &trans          &trans
                                                    &trans          &trans          &trans          &trans      
)
ZMK_LAYER(l_nav,
    &kp TAB         &none           &none           &none           &none           &kp PG_UP       &kp BSPC        &kp UP          &kp DEL         &none
    &sk LSHFT       &sk LCTRL       &sk LALT        &sk LGUI        &kp TAB         &kp PG_DN       &kp LEFT        &kp DOWN        &kp RIGHT       &kp RET 
    &none           &none           &none           &kp LGUI        &none           &kp INSERT      &kp HOME        &kp TAB         &kp END         &none 
                                                    &none           &none           &kp K_CANCEL    &sl L_NUMBER
)	
ZMK_LAYER(l_fun,
    &kp F12         &kp F7          &kp F8          &kp F9          &kp PSCRN       &none           &none           &none           &none           &none
    &kp F11         &kp F4          &kp F5          &kp F6          &kp SLCK        &kp C_PP        &sk RGUI        &sk RALT        &sk RCTRL       &sk RSHFT 
    &kp F10         &kp F1          &kp F2          &kp F3          &kp PAUSE_BREAK &kp C_PREV      &kp C_NEXT      &kp C_MUTE      &kp C_VOL_DN    &kp C_VOL_UP  
                                                    &sl L_NAV   &kp SPACE       &none           &none
)
ZMK_LAYER(l_utility,
    &to QWERTY      &to L_GAMING&to L_COLEMAK_DH  &out OUT_BLE    &out OUT_USB    &none           &none           &none           &none           &none
    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &none           &none           &none           &none           &none 
    &bt BT_CLR      &none           &none           &sys_reset      &bootloader          &none           &none           &none           &none           &none
                                                    &none           &none           &none           &none
)
ZMK_LAYER(l_gaming_number,
    &kp LGUI        &kp N7          &kp N8          &kp N9          &kp T           &none           &none           &none           &none           &none
    &kp N0          &kp N4          &kp N5          &kp N6          &kp G           &none           &sk RGUI        &sk RALT        &sk RCTRL       &sk RSHFT 
    &kp ESC         &kp N1          &kp N2          &kp N3          &kp B           &none           &kp APOS        &kp GRAVE       &none           &kp CAPS
                                                    &none           &kp SPACE       &none           &none
)
ZMK_LAYER(l_gaming_right_alpha,
    &kp Y           &kp U           &kp I           &kp O           &kp P           &kp BSPC        &kp PG_UP       &kp UP          &kp PG_DN       &kp DEL
    &kp H           &kp J           &kp K           &kp L           &kp SEMI        &none           &kp LEFT        &kp DOWN        &kp RIGHT       &kp KP_ENTER
    &kp N           &kp M           &kp CMMA        &kp DOT         &kp SLASH       &kp INSERT      &kp HOME        &kp TAB         &kp END         &none
                                                    &none           &kp SPACE       &none           &none
)
// Doesn't work for windows. Needs different definitions.
// ZMK_LAYER(l_uc,
// //  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
//        &none           &el_omega     &el_phi       &el_pi        &el_beta         &none       &el_lambda    &el_upsilon   &el_psi       &de_eszett  
// //  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
//        &el_alpha     &el_rho       &el_sigma     &el_tau       &el_gamma        &el_mu        &el_nu        &el_epsilon   &el_iota      &el_omikron 
// //  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
//        &el_zeta      &el_xi        &el_chi       &el_delta     &el_theta        &el_kappa     &el_eta       &de_ae        &de_oe        &de_ue      
// //  ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯ 
//                                                  &none          &none          &none           &none                                                   
// //                                      ╰─────────────┴─────────────╯  ╰───────────────────────────╯                                           
// )


