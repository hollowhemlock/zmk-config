/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 * https://github.com/rhhub/zmk-config/actions
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/num_word.dtsi> // requires auto-layer module

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"
#include "zmk-helpers/unicode-chars/german.dtsi"
#include "zmk-helpers/unicode-chars/greek.dtsi"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH1 LH0 RH0 RH1

#define COLEMAK_DH 0
#define QWERTY 1
#define GAMING_LAYER 2
#define NUMBER_LAYER 3
#define NAV_LAYER 4
#define FUN_LAYER 5
#define UTILITY 6
#define GAMING_NUMBER_LAYER 7 
#define GAMING_RIGHT_ALPHA_LAYER 8 
#define UC 9

// Personal includes
#include "includes/behaviors_homerow_mods.dtsi"
#include "includes/combos.dtsi" // must be after layer definitions


&sk {
    release-after-ms = <250>; // Needs to be long enough for one handed modifiers. Short enough to allow mouse zooming and mitigage alt tab conflicts.
    quick-release;
    // TODO: need to add back?
    // ignore-modifiers; // urob doesn't have this
};

// Important because errors without sticky layer are punishing and cause unconfident typing. e.g. a fast layer + enter roll
&sl {
    release-after-ms = <250>; // Can be shorter than &sk.
    // TODO: need to remove following?
    ignore-modifiers;          // allow chording sticky mods & layers
};

// Initially used for gaming layer but can't use for gaming holds.
// &mt {
//     tapping-term-ms = <150>;
// };


// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
// note: program hotkeys sometimes don't respond to non standard keys
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
)
// Not needed greater than is on a combo
// ZMK_BEHAVIOR(comma_inner_morph, mod_morph,
//     bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
//     mods = <(MOD_LCTL|MOD_RCTL)>;
// )

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
// note: program hotkeys sometimes don't respond to non standard keys
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// Not needed greater than is on a combo
// ZMK_BEHAVIOR(dot_inner_morph, mod_morph,
//     bindings = <&kp COLON>, <&kp GREATER_THAN>;
//     mods = <(MOD_LCTL|MOD_RCTL)>;
// )

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUMBER_LAYER 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word NUMBER_LAYER>, <&sl NUMBER_LAYER>;  // reverse this for sticky-num on single tap
)

// // TODO: maybe add semi colon to continue list.
// &num_word {
//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL LSHIFT COLON>;
// };

/ {
    // behaviors {
   behaviors {
        // This is ambiguous because it gits rid of the benefit of a quick roll with sticky key and enter. It can accidentily produce a letter.
        hsltk: hold_sticky_layer_tap_key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <150>; 
            flavor = "hold-preferred";
            bindings = <&sl>, <&kp>;
        };
        // used for gaming alt key; unusable if using modtap number keys and function keys for dyson sphere project
        // maybe not unstable because it is decided on the first key 
         hktsl: hold_key_tap_sticky_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>; 
            flavor = "tap-preferred";
            bindings = <&kp>, <&sl>;
        };
        // td_nav_esc: tap_dance_nav_esc {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "TAP_DANCE_0";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&sl NAV_LAYER>, <&kp ESC>;
        // };


       
    };
    combos {
        compatible = "zmk,combos";
        to_colemak_dh_layer {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&to COLEMAK_DH>;
        };
        to_gaming_layer {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&to GAMING_LAYER>;
        };
        utility_layer_left_access {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&mo UTILITY>;
        };
        utility_layer_right_access { timeout-ms = <50>;
            key-positions = <25 26>; 
            bindings = <&mo UTILITY>;
        };
        // left_double_thumb_layer {
        //     timeout-ms = <50>;
        //     key-positions = <30 31>;
        //     bindings = <&sl LEFT_DOUBLE_THUMB>;
        // };
        // was function layer, annoying to use
        // right_double_thumb_layer {
        //     timeout-ms = <50>;
        //     key-positions = <32 33>;
        //     bindings = <&mo FUN_LAYER>;
        // };
        // test_gaming_alt { 
        //     timeout-ms = <50>;
        //     require-prior-idle-ms = <75>;
        //     key-positions = <LT4 LM4>;
        //     bindings = <&kp N2>;
        //     layers = <GAMING_LAYER>;
        // };
        // test_gaming_number { 
        //     timeout-ms = <50>;
        //     require-prior-idle-ms = <75>;
        //     key-positions = <1 11>;
        //     bindings = <&kp N1>;
        //     layers = <GAMING_LAYER>;
        // };
    };


     // TODO: clean up nones to trans if needed.
     // TODO: hide the alt key under the gaming alpha layer so it can be held while gaming.
     // TODO: find a place for gaming functions when needed. must be fluid. maybe a combo on the thumb. can go 15 functions that way.
    keymap {
        compatible = "zmk,keymap";
        colemak_dh_layer {
            bindings = <
                &kp Q           &kp W           &kp F           &kp P           &kp B 	        &kp J           &kp L           &kp U           &kp Y           &kp SQT 
                &hml LSHFT A    &hml LCTRL R    &hml LALT S     &hml LGUI T     &kp G 	        &kp M           &hmr RGUI N     &hmr RALT E     &hmr RCTRL I    &hmr RSHFT O
                &kp Z           &kp X           &kp C           &kp D           &kp V	        &kp K           &kp H           &comma_morph    &dot_morph      &kp SLASH
                                                                &sl NAV_LAYER   &kp SPACE  	    &smart_shft     SMART_NUM
            >;
		};
        // colemak_dh_layer {
        //     bindings = <
        //           &kp Q       &kp W       &kp F       &kp P       &kp B 	      &kp J       &kp L       &kp U       &kp Y       &kp SEMI 
        //           &kp A       &kp R       &kp S       &kp T       &kp G 	      &kp M       &kp N       &kp E       &kp I       &kp O
        //           &kp Z       &kp X       &kp C       &kp D       &kp V	          &kp K       &kp H       &kp CMMA    &kp DOT     &kp SLASH
        //                                         &sl NAV_LAYER   &kp SPACE  			      &sl FUN_LAYER   &sl NUMBER_LAYER
        //     >;
		// };
        qwerty_layer {
            bindings = <
                &kp Q           &kp W           &kp E           &kp R           &kp T 	        &kp Y           &kp U           &kp I           &kp O           &kp P 
                &hml LSHFT A    &hml LCTRL S    &hml LALT D     &hml LGUI F     &kp G 	        &kp H           &hmr RGUI J     &hmr RALT K     &hmr RCTRL L    &hmr RSHFT SEMI
                &kp Z           &kp X           &kp C           &kp V           &kp B	        &kp N           &kp M           &kp CMMA        &kp DOT         &kp SLASH
                                                                &sl NAV_LAYER   &kp SPACE  	    &smart_shft     SMART_NUM
            >;
		};
		gaming_layer { // T G B are horizontal combos in last column. How to incorporate function keys in number layer? 6x3 board would be nice with an isolated alt key and isoltaed gaming number layer. 
            bindings = <
                &kp TAB         &kp Q           &kp W           &kp E           &kp R     	    &kp Y           &kp U           &kp I           &kp O           &kp P 
                &kp LSHIFT      &kp A           &kp S           &kp D           &kp F 	        &kp H           &kp J           &kp K           &kp L           &kp SEMI 
                &kp LCTRL       &kp Z           &kp X           &kp C           &kp V   	    &kp N           &kp M           &kp CMMA        &kp DOT         &kp SLASH
                                                &hktsl LALT GAMING_RIGHT_ALPHA_LAYER &kp SPACE  &sl FUN_LAYER   &sl GAMING_RIGHT_ALPHA_LAYER
            >;
		};	  
		// gaming_layer { // does shift need to be next to the left of a
        //     bindings = <
        //           &sl GAMING_RIGHT_ALPHA_LAYER   &kp Q       &kp W       &kp E       &kp R     	        &kp Y       &kp U       &kp I       &kp O       &kp P 
        //           &sl GAMING_NUMBER_LAYER       &kp A       &kp S       &kp D       &kp F 	            &kp H       &kp J       &kp K       &kp L       &kp SEMI 
        //           &sl FUN_LAYER                 &kp Z       &kp X       &kp C       &kp V   	        &kp N       &kp M       &kp CMMA    &kp DOT     &kp SLASH
        //                     &sl NAV_LAYER &kp SPACE  				&trans  &trans
        //     >;
		// };	  
       	number_layer {
            bindings = <
                &trans          &kp N7          &kp N8          &kp N9          &trans          &trans          &trans          &trans          &trans          &trans
                &kp  N0         &kp N4          &kp N5          &kp N6          &trans          &trans          &trans          &trans          &kp SEMI        &trans 
                &trans          &kp N1          &kp N2          &kp N3          &trans          &trans          &trans          &trans          &trans          &trans
                                                                &trans          &trans          &trans          &trans      
            >;
		};
		nav_layer {
            bindings = <
                &kp TAB         &none           &none           &none           &none           &kp BSPC        &kp PG_UP       &kp UP          &kp PG_DN       &kp DEL
                &sk LSHFT       &sk LCTRL       &sk LALT        &sk LGUI        &kp TAB         &none           &kp LEFT        &kp DOWN        &kp RIGHT       &kp KP_ENTER 
                &none           &none           &none           &kp LGUI        &none           &kp INSERT      &kp HOME        &kp TAB         &kp END         &none 
                                                                &none           &none           &sl FUN_LAYER   &sl NUMBER_LAYER
            >;
		};	
            fun_layer {
            bindings = <
                &kp F12         &kp F7          &kp F8          &kp F9          &kp PSCRN       &none           &none           &none           &none           &none
                &kp F11         &kp F4          &kp F5          &kp F6          &kp SLCK        &kp C_PP        &sk RGUI        &sk RALT        &sk RCTRL       &sk RSHFT 
                &kp F10         &kp F1          &kp F2          &kp F3          &kp PAUSE_BREAK &kp C_PREV      &kp C_NEXT      &kp C_MUTE      &kp C_VOL_DN    &kp C_VOL_UP  
                                                                &sl NAV_LAYER   &kp SPACE       &none           &none
            >;
		};
            utility_layer {
            bindings = <
                &bootloader     &sys_reset      &out OUT_USB    &out OUT_BLE    &bt BT_CLR      &bt BT_CLR      &none           &none           &sys_reset      &bootloader
                &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &none           &none           &none           &none           &none 
                &none           &none           &none           &none           &tog QWERTY     &none           &none           &none           &none           &none        
                                                                &none           &none           &none           &none
            >;
		};
        gaming_number_layer {
            bindings = <
                &kp LGUI        &kp N7          &kp N8          &kp N9          &kp T           &none           &none           &none           &none           &none
                &kp N0          &kp N4          &kp N5          &kp N6          &kp G           &none           &sk RGUI        &sk RALT        &sk RCTRL       &sk RSHFT 
                &kp ESC         &kp N1          &kp N2          &kp N3          &kp B           &none           &kp APOS        &kp GRAVE       &none           &kp CAPS
                                                                &none           &kp SPACE       &none           &none
            >;
		};
        gaming_right_alpha_layer {
            bindings = <
                &kp Y           &kp U           &kp I           &kp O           &kp P           &kp BSPC        &kp PG_UP       &kp UP          &kp PG_DN       &kp DEL
                &kp H           &kp J           &kp K           &kp L           &kp SEMI        &none           &kp LEFT        &kp DOWN        &kp RIGHT       &kp KP_ENTER
                &kp N           &kp M           &kp CMMA        &kp DOT         &kp SLASH       &kp INSERT      &kp HOME        &kp TAB         &kp END         &none
                                                                &none           &kp SPACE       &none           &none
            >;
		};
        uc_layer {
            // Doesn't work for windows. Needs different definitions.
            bindings = <
            //  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
                   &none           &el_omega     &el_phi       &el_pi        &el_beta         &none       &el_lambda    &el_upsilon   &el_psi       &de_eszett  
            //  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
                   &el_alpha     &el_rho       &el_sigma     &el_tau       &el_gamma        &el_mu        &el_nu        &el_epsilon   &el_iota      &el_omikron 
            //  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
                   &el_zeta      &el_xi        &el_chi       &el_delta     &el_theta        &el_kappa     &el_eta       &de_ae        &de_oe        &de_ue      
            //  ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴───────────────────────────╯ 
                                                             &none          &none          &none           &none                                                   
                                                    //    ╰─────────────┴─────────────╯  ╰───────────────────────────╯                                           
            >;
		};
	};
};


