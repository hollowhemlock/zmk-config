/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define COLEMAK_DH 0
#define QWERTY 1
#define GAMING_LAYER 2
#define NUMBER_LAYER 3
#define NAV_LAYER 4
#define FUN_LAYER 5
#define UTILITY 6
#define GAMING_NUMBER_LAYER 7 
#define GAMING_RIGHT_ALPHA_LAYER 8 

&sk {
    release-after-ms = <250>; // Needs to be long enough for one handed modifiers. Short enough to allow mouse zooming and mitigage alt tab conflicts.
    quick-release;
    ignore-modifiers;
};

// Important because errors without sticky layer are punishing and cause unconfident typing. e.g. a fast layer + enter roll
&sl {
    release-after-ms = <250>; // Can be shorter than &sk.
};

/ { 
    // This was used for sub layer home row modifiers for some reason. I think I had an issue playing 5atisfactory.
    // Maybe it was used to auto release the keys if held for a certain amount of time.
    // Relevant implementations:    
    // &shk LSHFT LSHFT &shk LCTRL LCTRL &shk LALT LALT &shk LGUI LGUI
    // &shk RGUI RGUI &shk RALT RALT &shk RCTRL RCTRL &shk RSHFT RSHFT
    // behaviors {
    //     shk: sticky_hold_key {
    //         compatible = "zmk,behavior-hold-tap";
    //         label = "STICKY_HOLD_KEY";
    //         #binding-cells = <2>;

    //         /* 
    //         tapping_term increased to minimize chance of single sticky in combo rolling
    //         keep low to minimize delay for actions that depend on holding, e.g. ctrl+mouse scroll wheel to zoom
    //         safe with &sk quick release flag
    //         */
    //         tapping_term_ms = <200>; 
    //         flavor = "tap-preferred";
    //         bindings = <&kp>, <&sk>;
    //     };
    // };

    // unused
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <LEFT_THUMB NUMBER_LAYER>;
    //         then-layer = <NAV_LAYER>;
    //     };
    //   };
    combos {
        compatible = "zmk,combos";
        toggle_gaming_layer {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&tog GAMING_LAYER>;
        };
        utility_layer_left_access {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&mo UTILITY>;
        };
        utility_layer_right_access {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&mo UTILITY>;
        };
        // left_double_thumb_layer {
        //     timeout-ms = <50>;
        //     key-positions = <30 31>;
        //     bindings = <&sl LEFT_DOUBLE_THUMB>;
        // };
        // was function layer, annoying to use
        // right_double_thumb_layer {
        //     timeout-ms = <50>;
        //     key-positions = <32 33>;
        //     bindings = <&mo FUN_LAYER>;
        // };
      };

        keymap {
                compatible = "zmk,keymap";
        colemak_dh_layer {
            bindings = <
                  &kp Q       &kp W       &kp F       &kp P       &kp B 	      &kp J       &kp L       &kp U       &kp Y       &kp SEMI 
                  &kp A       &kp R       &kp S       &kp T       &kp G 	      &kp M       &kp N       &kp E       &kp I       &kp O
                  &kp Z       &kp X       &kp C       &kp D       &kp V	          &kp K       &kp H       &kp CMMA    &kp DOT     &kp SLASH
                                                &sl NAV_LAYER   &kp SPACE  			      &sl FUN_LAYER   &sl NUMBER_LAYER
            >;
		};
        qwerty_layer {
            bindings = <
                  &kp Q       &kp W       &kp E       &kp R       &kp T 	      &kp Y       &kp U       &kp I       &kp O       &kp P 
                  &kp A       &kp S       &kp D       &kp F       &kp G 	      &kp H       &kp J       &kp K       &kp L       &kp SEMI
                  &kp Z       &kp X       &kp C       &kp V       &kp B	          &kp N       &kp M       &kp CMMA    &kp DOT     &kp SLASH
                                                &sl NAV_LAYER   &kp SPACE  			      &sl FUN_LAYER   &sl NUMBER_LAYER
            >;
		};
		gaming_layer { // does shift need to be next to the left of a
            bindings = <
                  &sl GAMING_RIGHT_ALPHA_LAYER   &kp Q       &kp W       &kp E       &kp R     	        &kp Y       &kp U       &kp I       &kp O       &kp P 
                  &sl GAMING_NUMBER_LAYER       &kp A       &kp S       &kp D       &kp F 	            &none  &none &none &none &none 
                  &sl FUN_LAYER                 &kp Z       &kp X       &kp C       &kp V   	        &none  &none &none &none &none
                            &sl NAV_LAYER &kp SPACE  				&trans  &trans
            >;
		};	

       	number_layer {
            bindings = <
                  &kp LBKT      &kp N7      &kp N8      &kp N9      &kp RBKT            &none  &none &none     &none   &none
                  &kp  N0     &kp N4      &kp N5      &kp N6      &kp EQUAL           &none  &sk RGUI &sk RALT &sk RCTRL &sk RSHFT 
                  &kp BSLH     &kp N1      &kp N2      &kp N3      &kp MINUS            &none       &kp APOS     &kp GRAVE              &none       &kp CAPS
                                                &sl NAV_LAYER       &kp SPACE        			      &none       &none
            >;
		};

    
		nav_layer {
            bindings = <
                &kp TAB      &none &none &none &none            &kp DEL         &kp PG_UP   &kp UP   &kp PG_DN  &kp BSPC
                &sk LSHFT &sk LCTRL &sk LALT &sk LGUI &kp TAB  		                            &none     &kp LEFT  &kp DOWN &kp RIGHT &kp KP_ENTER 
                &none  &none &none &kp LGUI &kp ESC 				                            &kp INSERT      &kp HOME &kp TAB  &kp END &none 
                            &none &none  					&sl FUN_LAYER &sl NUMBER_LAYER
            >;
		};	
            fun_layer {
            bindings = <
                &kp F12      &kp F7      &kp F8      &kp F9      &kp PSCRN             &none  &none &none &none &none
                &kp F11     &kp F4      &kp F5      &kp F6      &kp SLCK               &kp C_PLAY_PAUSE &sk RGUI &sk RALT &sk RCTRL &sk RSHFT 
                &kp F10  &kp F1      &kp F2      &kp F3      &kp PAUSE_BREAK            &kp C_PREV   &kp C_NEXT &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP  
                                            &sl NAV_LAYER   &kp SPACE					&none &none
            >;
		};
            utility_layer {
            bindings = <
                &bootloader  &reset &out OUT_USB &out OUT_BLE &bt BT_CLR                                &bt BT_CLR &none &none &reset &bootloader
                &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &none  &none &none &none &none 
                &none &none &none &none &tog QWERTY                                             &none  &none &none &none &none        
                            &none &none 					                        &none &none
            >;
		};
        gaming_number_layer {
            bindings = <
                  &kp LBKT      &kp N7      &kp N8      &kp N9      &kp T            &none  &none &none     &none   &none
                  &kp  N0     &kp N4      &kp N5      &kp N6      &kp G           &none  &sk RGUI &sk RALT &sk RCTRL &sk RSHFT 
                  &kp BSLH     &kp N1      &kp N2      &kp N3      &kp B            &none       &kp APOS     &kp GRAVE              &none       &kp CAPS
                                                &none       &kp SPACE        			      &none       &none
            >;
		};
        gaming_right_alpha_layer {
            bindings = <
                  &kp Y       &kp U       &kp I       &kp O       &kp P                     &none  &none &none &none &none
                  &kp H       &kp J       &kp K       &kp L       &kp SEMI                  &none  &none &none &none &none
                  &kp N       &kp M       &kp CMMA    &kp DOT     &kp SLASH                 &none  &none &none &none &none
                                                &none   &kp SPACE  			      &none &none
            >;
		};
	};
};
