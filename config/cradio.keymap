/*
 * copyright (c) 2020 the zmk contributors
 *
 * spdx-license-identifier: mit
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define colemak_dh 0
#define qwerty 1
#define gaming_layer 2
#define number_layer 3
#define nav_layer 4
#define fun_layer 5
#define utility 6
#define gaming_number_layer 7 
#define gaming_right_alpha_layer 8 

&sk {
    release-after-ms = <250>; // needs to be long enough for one handed modifiers. short enough to allow mouse zooming and mitigage alt tab conflicts.
    quick-release;
    ignore-modifiers;
};

// important because errors without sticky layer are punishing and cause unconfident typing. e.g. a fast layer + enter roll
&sl {
    release-after-ms = <250>; // can be shorter than &sk.
};

/ { 
    // this was used for sub layer home row modifiers for some reason. i think i had an issue playing 5atisfactory.
    // maybe it was used to auto release the keys if held for a certain amount of time.
    // relevant implementations:    
    // &shk lshft lshft &shk lctrl lctrl &shk lalt lalt &shk lgui lgui
    // &shk rgui rgui &shk ralt ralt &shk rctrl rctrl &shk rshft rshft
    behaviors {
        shk: sticky_hold_key {
            compatible = "zmk,behavior-hold-tap";
            label = "sticky_hold_key";
            #binding-cells = <2>;

            /* 
            tapping_term increased to minimize chance of single sticky in combo rolling
            keep low to minimize delay for actions that depend on holding, e.g. ctrl+mouse scroll wheel to zoom
            safe with &sk quick release flag
            */
            tapping_term_ms = <100>; 
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
    };

    // unused
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <left_thumb number_layer>;
    //         then-layer = <nav_layer>;
    //     };
    //   };
    combos {
        compatible = "zmk,combos";
        toggle_gaming_layer {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&tog gaming_layer>;
        };
        utility_layer_left_access {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&mo utility>;
        };
        utility_layer_right_access {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&mo utility>;
        };
        // left_double_thumb_layer {
        //     timeout-ms = <50>;
        //     key-positions = <30 31>;
        //     bindings = <&sl left_double_thumb>;
        // };
        // was function layer, annoying to use
        // right_double_thumb_layer {
        //     timeout-ms = <50>;
        //     key-positions = <32 33>;
        //     bindings = <&mo fun_layer>;
        // };
      };

        keymap {
                compatible = "zmk,keymap";
        colemak_dh_layer {
            bindings = <
                  &kp q       &kp w       &kp f       &kp p       &kp b 	      &kp j       &kp l       &kp u       &kp y       &kp semi 
                  &kp a       &kp r       &kp s       &kp t       &kp g 	      &kp m       &kp n       &kp e       &kp i       &kp o
                  &kp z       &kp x       &kp c       &kp d       &kp v	          &kp k       &kp h       &kp cmma    &kp dot     &kp slash
                                               &shk esc nav_layer   &kp space  			      &sl fun_layer   &sl number_layer
            >;
		};
        qwerty_layer {
            bindings = <
                  &kp q       &kp w       &kp e       &kp r       &kp t 	      &kp y       &kp u       &kp i       &kp o       &kp p 
                  &kp a       &kp s       &kp d       &kp f       &kp g 	      &kp h       &kp j       &kp k       &kp l       &kp semi
                  &kp z       &kp x       &kp c       &kp v       &kp b	          &kp n       &kp m       &kp cmma    &kp dot     &kp slash
                                                &sl nav_layer   &kp space  			      &sl fun_layer   &sl number_layer
            >;
		};
		gaming_layer { // does shift need to be next to the left of a
            bindings = <
                  &sl gaming_right_alpha_layer   &kp q       &kp w       &kp e       &kp r     	        &kp y       &kp u       &kp i       &kp o       &kp p 
                  &sl gaming_number_layer       &kp a       &kp s       &kp d       &kp f 	            &none  &none &none &none &none 
                  &sl fun_layer                 &kp z       &kp x       &kp c       &kp v   	        &none  &none &none &none &none
                            &sl nav_layer &kp space  				&trans  &trans
            >;
		};	

       	number_layer {
            bindings = <
                  &kp lbkt      &kp n7      &kp n8      &kp n9      &kp rbkt            &none  &none &none     &none   &none
                  &kp  n0     &kp n4      &kp n5      &kp n6      &kp equal           &none  &sk rgui &sk ralt &sk rctrl &sk rshft 
                  &kp bslh     &kp n1      &kp n2      &kp n3      &kp minus            &none       &kp apos     &kp grave              &none       &kp caps
                                                &sl nav_layer       &kp space        			      &none       &none
            >;
		};
    
		nav_layer {
            bindings = <
                &none      &none &none &none &none                                          &kp del         &kp pg_up   &kp up   &kp pg_dn  &kp bspc
                &sk lshft &sk lctrl &sk lalt &sk lgui &kp tab  		                            &none     &kp left  &kp down &kp right &kp kp_enter 
                &kp tab  &none &none &kp lgui &kp esc 				                            &kp insert      &kp home &kp tab  &kp end &none 
                            &none &none  					&sl fun_layer &sl number_layer
            >;
		};	
            fun_layer {
            bindings = <
                &kp f12      &kp f7      &kp f8      &kp f9      &kp pscrn             &none  &none &none &none &none
                &kp f11     &kp f4      &kp f5      &kp f6      &kp slck               &kp c_play_pause &sk rgui &sk ralt &sk rctrl &sk rshft 
                &kp f10  &kp f1      &kp f2      &kp f3      &kp pause_break            &kp c_prev   &kp c_next &kp c_mute &kp c_vol_dn &kp c_vol_up  
                                            &sl nav_layer   &kp space					&none &none
            >;
		};
            utility_layer {
            bindings = <
                &bootloader  &reset &out out_usb &out out_ble &bt bt_clr                                &bt bt_clr &none &none &reset &bootloader
                &bt bt_sel 0  &bt bt_sel 1 &bt bt_sel 2 &bt bt_sel 3 &bt bt_sel 4       &none  &none &none &none &none 
                &none &none &none &none &tog qwerty                                             &none  &none &none &none &none        
                            &none &none 					                        &none &none
            >;
		};
        gaming_number_layer {
            bindings = <
                  &kp lbkt      &kp n7      &kp n8      &kp n9      &kp t            &none  &none &none     &none   &none
                  &kp  n0     &kp n4      &kp n5      &kp n6      &kp g           &none  &sk rgui &sk ralt &sk rctrl &sk rshft 
                  &kp bslh     &kp n1      &kp n2      &kp n3      &kp b            &none       &kp apos     &kp grave              &none       &kp caps
                                                &none       &kp space        			      &none       &none
            >;
		};
        gaming_right_alpha_layer {
            bindings = <
                  &kp y       &kp u       &kp i       &kp o       &kp p                     &none  &none &none &none &none
                  &kp h       &kp j       &kp k       &kp l       &kp semi                  &none  &none &none &none &none
                  &kp n       &kp m       &kp cmma    &kp dot     &kp slash                 &none  &none &none &none &none
                                                &none   &kp space  			      &none &none
            >;
		};
	};
};
